{"version":3,"sources":["component/template.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","src","photo","name","nickname","date","content","width","image","message","class","reTweet","like","pData","App","map","post","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mRA6CeA,G,UA3CF,SAACC,GACZ,OACE,yBAAKC,UAAU,QAEb,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,uBACd,yBAAKC,IAAKF,EAAMG,SAElB,0BAAMF,UAAU,yBACd,yBAAKA,UAAU,8BACb,0BAAMA,UAAU,QAAQD,EAAMI,MAC9B,yBAAKF,IAAI,wBAAwBD,UAAU,gBAC3C,0BAAMA,UAAU,QAAO,2BAAID,EAAMK,UAAjC,WAAkDL,EAAMM,OAE1D,yBAAKL,UAAU,gCACb,8BAAOD,EAAMO,WAGjB,0BAAMN,UAAU,kCAAiC,yBAAKC,IAAI,uBAAuBM,MAAM,WAGzF,yBAAKP,UAAU,gBACb,yBAAKC,IAAKF,EAAMS,SAGlB,yBAAKR,UAAU,gBACf,8BACJ,uBAAGC,IAAI,IAAG,yBAAKA,IAAI,yBAAwB,0BAAMD,UAAU,aAAaD,EAAMU,WAE1E,0BAAMC,MAAM,WACV,uBAAGT,IAAI,IAAG,yBAAKA,IAAI,yBAAwB,0BAAMD,UAAU,aAAaD,EAAMY,WAEhF,0BAAMD,MAAM,WACV,uBAAGT,IAAI,IAAG,yBAAKA,IAAI,sBAAsB,0BAAMD,UAAU,aAAaD,EAAMa,QAE9E,0BAAMF,MAAM,WACV,uBAAGT,IAAI,IAAG,yBAAKA,IAAI,6BCjCrBY,G,MAAQ,CACZ,CACEV,KAAM,mBACND,MAAO,0BACPE,SAAU,gBACVC,KAAM,UACNC,QAAS,kDACTE,MAAO,+BACPC,QAAS,IACTE,QAAS,IACTC,KAAM,KAER,CACET,KAAM,oBACND,MAAO,+BACPE,SAAU,mBACVC,KAAM,UACNC,QAAS,gDACTE,MAAO,oCACPC,QAAS,IACTE,QAAS,GACTC,KAAM,KAER,CACET,KAAM,+BACND,MAAO,2BACPE,SAAU,iBACVC,KAAM,UACNC,QAAS,mDACTE,MAAO,+BACPC,QAAS,IACTE,QAAS,IACTC,KAAM,OAYKE,MARf,WACE,OACE,yBAAKd,UAAU,OACXa,EAAME,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAASA,QChChBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzB,c","file":"static/js/main.5b314585.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className=\"card\">\r\n\r\n      <div className=\"card__header\">\r\n        <span className=\"card__header_avatar\">\r\n          <img src={props.photo} />\r\n        </span>\r\n        <span className=\"card__header__textBox\">\r\n          <div className=\"card__header__textBox_name\">\r\n            <span className=\"bold\">{props.name}</span>\r\n            <img src='./img/star-active.png' className=\"star-active\" />            \r\n            <span className=\"gray\"><a>{props.nickname}</a> • {props.date}</span> \r\n          </div>       \r\n          <div className=\"card__header__textBox_status\">\r\n            <span>{props.content}</span>\r\n          </div>          \r\n        </span>\r\n        <span className=\"card__header__textBox_dw_Arrow\"><img src=\"./img/down-arrow.png\" width=\"14px\"/></span>\r\n      </div>\r\n\r\n      <div className=\"card__center\">\r\n        <img src={props.image} />\r\n      </div>\r\n\r\n      <div className=\"card__footer\">\r\n      <span>\r\n  <a src=\"\"><img src=\"./img/tw-message.png\"/><span className=\"icon2text\">{props.message}</span></a>\r\n      </span>\r\n      <span class=\"leftTab\">\r\n        <a src=\"\"><img src=\"./img/tw-retweet.png\"/><span className=\"icon2text\">{props.reTweet}</span></a>\r\n      </span>\r\n      <span class=\"leftTab\">\r\n        <a src=\"\"><img src=\"./img/tw-like.png\" /><span className=\"icon2text\">{props.like}</span></a>\r\n      </span>\r\n      <span class=\"leftTab\">\r\n        <a src=\"\"><img src=\"./img/tw-share.png\" /></a>\r\n      </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport './App.css';\nimport Post from './component/template.js';\nimport './component/template.css';\n\nconst pData = [\n  { \n    name: \"Anakin Skywalker\",\n    photo: \"./img/skywalker-ava.jpg\",\n    nickname: \"@anakin-batya\",\n    date: \"26 mar.\",    \n    content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n    image: \"./img/sw9_ReySabre-laser.jpg\",    \n    message: 482,\n    reTweet: 146,\n    like: 887    \n  },\n  { \n    name: \"Emperor Palpatine\",\n    photo: \"./img/sheevPalpatine-ava.jpg\",\n    nickname: \"@sheva-imperator\",\n    date: \"12 aug.\",   \n    content: \"That woman could turn any Ewok into a Wookie.\", \n    image: \"./img/sw9_PadmeAmidala-pictol.jpg\",    \n    message: 321,\n    reTweet: 97,\n    like: 784    \n  },\n  { \n    name: \"Princess/General Leia Organa\",\n    photo: \"./img/leiaOrgana-ava.jpg\",\n    nickname: \"@princess-Leia\",\n    date: \"17 apr.\",    \n    content: \"What if you took Han Solo and gave him no depth?\",\n    image: \"./img/sw9_PoeDameron-jet.jpg\",    \n    message: 296,\n    reTweet: 138,\n    like: 754    \n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      { pData.map(post => <Post {...post} /> )}\n    </div>\n  );\n}\n\nexport default App;\n\n/*\nЗавдання Basic:\nВам необхідно створити функціональний компонент, який можна використовувати для відображення публікації (як у твітері або фейсбуці).\nПриклад використання компоненту:\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\n<Post author={{\n            name: \"Anakin skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\"\n         }}\n         content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n         image={RAY_IMAGE}\n         date={\"26 февр.\"}\n/>\n                    \nПриклад дизайну. Не обов'язково робити саме так і з такими іконками – це для загального розуміння.\nАле гарні стилі дуже дуууже рекомендуються :)\nПосилання на зображення вище у прикладі виклику як константи.\nГалочки та іконки лайку/шерингу/коментів/репостів потрібно опустити, а можна і покреативити.\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}